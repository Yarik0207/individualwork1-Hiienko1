#include <iostream>

struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;
};

void connect(Node *root) {
    if (!root || !root->left) {
        return;
    }

    // Connect the children of the current node
    root->left->next = root->right;

    // Connect the right child of the current node with the left child of the next node
    if (root->next) {
        root->right->next = root->next->left;
    }

    // Recursively connect the children of the left and right subtrees
    connect(root->left);
    connect(root->right);
}

int main() {
    // Example usage
    Node *root = new Node{1,
                          new Node{2,
                                   new Node{4, nullptr, nullptr, nullptr},
                                   new Node{5, nullptr, nullptr, nullptr},
                                   nullptr},
                          new Node{3,
                                   nullptr,
                                   new Node{7, nullptr, nullptr, nullptr},
                                   nullptr},
                          nullptr};

    connect(root);

    // Print the results
    Node *current = root;
    while (current) {
        Node *temp = current;
        while (temp) {
            std::cout << temp->val << " ";
            temp = temp->next;
        }
        std::cout << "#\n";
        current = current->left;
    }
