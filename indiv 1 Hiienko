#include <iostream>

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* oddEvenList(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }

    ListNode *oddHead = head;
    ListNode *evenHead = head->next;
    ListNode *odd = oddHead;
    ListNode *even = evenHead;

    while (even && even->next) {
        odd->next = even->next;
        odd = odd->next;
        even->next = odd->next;
        even = even->next;
    }

    odd->next = evenHead;  

    return oddHead;
}


void printList(ListNode* head) {
    while (head) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    
    ListNode* head1 = new ListNode(1);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(3);
    head1->next->next->next = new ListNode(4);
    head1->next->next->next->next = new ListNode(5);

    std::cout << "Input: ";
    printList(head1);

    ListNode* result1 = oddEvenList(head1);

    std::cout << "Output: ";
    printList(result1);

    
    ListNode* head2 = new ListNode(2);
    head2->next = new ListNode(1);
    head2->next->next = new ListNode(3);
    head2->next->next->next = new ListNode(5);
    head2->next->next->next->next = new ListNode(6);
    head2->next->next->next->next->next = new ListNode(4);
    head2->next->next->next->next->next->next = new ListNode(7);

    std::cout << "Input: ";
    printList(head2);

    ListNode* result2 = oddEvenList(head2);

    std::cout << "Output: ";
    printList(result2);

    return 0;
}
